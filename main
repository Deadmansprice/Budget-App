class Category:
    def __init__(self, Category):
        self.ledger = []
        self.name = Category

    def deposit(self, amount, description):
        self.ledger.append({"amount": amount, "description": description})

    def withdraw(self, amount, description):
        if self.check_funds(amount):
            self.ledger.append({"amount": -abs(amount), "description": description})
            return True
        else:
            return False

    def get_balance(self):
        #Balance check
        total_amount = 0
        for amount in self.ledger:
            total_amount += amount["amount"]
        return total_amount

    def transfer(self, amount, category):
        #Attempts to withdraw the amount from current category to another category
        if self.withdraw(amount, "Transfer to " + category.name):
            category.deposit(amount, "Transfer from " + self.name)
            return True
        else:
            return False

    def check_funds(self, amount):
        return amount <= self.get_balance()

    def __str__(self):
        category_title = self.name.center(30, '*') + "\n"
        for item in self.ledger:
            category_title += f"{item['description'][0:23]:23}" + f"{item['amount']:>7.2f}" + "\n"
        category_title += "Total: " + str(self.get_balance())
        return category_title

def create_spend_chart(categories):
    total = 0
    category_total = {}
    chart = "Percentage spent by category\n"

    for category in categories:
        for item in category.ledger:
            if item["amount"] < 0:
                total += abs(item["amount"])
            if category.name in category_total:
                category_total[category.name] += abs(item["amount"])
            else:
                category_total[category.name] = abs(item["amount"])

    category_percentages = {}
    for category in category_total:
        category_percentages[category] = (category_total[category] / total) * 100

    for _i, percent in enumerate(range(100, -10, -10)):
        chart += str(percent).rjust(3) + "| "
        for item in categories:
            chart += "o  " if category_percentages[item.name] >= percent else "   "
        chart += "\n"

    chart += "    " + "-" * (len(categories) * 3 + 1) + "\n"


    max_name_length = max(len(item.name) for item in categories)
    for i in range(max_name_length):
        chart += "     "
        for item in categories:
            if len(item.name) > i:
                chart += item.name[i] + "  " 
            else:
                chart += "   "
        chart += "\n"

    return chart.rstrip() + "  "

  # Instantiate the Category class
food = Category("Food")
clothing = Category("Clothing")
entertainment = Category("Entertainment")

# Test the deposit method
food.deposit(1000, "initial deposit")
clothing.deposit(1000, "initial deposit")
entertainment.deposit(1000, "initial deposit")

# Test the withdraw method
food.withdraw(10.15, "groceries")
food.withdraw(15.89, "restaurant and more food")
clothing.withdraw(5.50, "new shirt")
entertainment.withdraw(75, "concert tickets")

# Test the transfer method
food.transfer(50, clothing)

# Test the __str__ method
print(food)
print(clothing)
print(entertainment)

# Test the create_spend_chart function
print(create_spend_chart([food, clothing, entertainment]))
